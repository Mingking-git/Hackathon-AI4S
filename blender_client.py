import socket
import json
import os
import time

import logging

# Set up logging (this just prints messages to your terminal for debugging)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# --- Configuration ---
BLENDER_HOST = 'localhost'
BLENDER_PORT = 9876


# --- AI Integration Point ---

def call_ai_text_to_3d_api(prompt):
    """
    *** THIS IS A SIMULATED FUNCTION ***
    Replace the contents of this function with your actual API call
    to a Text-to-3D service.

    Args:
        prompt (str): The text description of the model to generate.

    Returns:
        str: The absolute filepath to the generated 3D model file (e.g., .obj).
             Returns None if generation fails.
    """
    logger.info("\n----------------------------------------------------")
    logger.info(f"[AI SIMULATION] Received prompt: '{prompt}'")
    logger.info("[AI SIMULATION] Calling Text-to-3D API... (simulating a 3-second wait)")
    time.sleep(3)

    # For this simulation, we will create a simple dummy OBJ file.
    # A real implementation would download this file from the AI service.
    # An .obj file is a simple text file defining vertices and faces.
    dummy_obj_content = (
        "# Dummy model generated by AI Simulation\n"
        "v 1.0 1.0 -1.0\n"
        "v 1.0 -1.0 -1.0\n"
        "v 1.0 1.0 1.0\n"
        "v 1.0 -1.0 1.0\n"
        "v -1.0 1.0 -1.0\n"
        "v -1.0 -1.0 -1.0\n"
        "v -1.0 1.0 1.0\n"
        "v -1.0 -1.0 1.0\n"
        "f 1 2 4 3\n"
        "f 3 4 8 7\n"
        "f 7 8 6 5\n"
        "f 5 6 2 1\n"
        "f 1 3 7 5\n"
        "f 2 4 8 6\n"
    )

    try:
        # Get the directory where this script is running
        script_dir = os.path.dirname(os.path.abspath(__file__))
        filepath = os.path.join(script_dir, "generated_model.obj")

        with open(filepath, "w") as f:
            f.write(dummy_obj_content)

        logger.info(f"[AI SIMULATION] Successfully created dummy model at: {filepath}")
        logger.info("----------------------------------------------------\n")
        return filepath

    except Exception as e:
        logger.error(f"[AI SIMULATION] Error creating dummy file: {e}")
        return None


def send_command_to_blender(command_payload):
    """
    Connects to the Blender server and sends a command payload as JSON.
    """
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            logger.info(f"Connecting to Blender at {BLENDER_HOST}:{BLENDER_PORT}...")
            s.connect((BLENDER_HOST, BLENDER_PORT))
            command_json = json.dumps(command_payload)
            s.sendall(command_json.encode('utf-8'))
            logger.info(f"Sent JSON: {command_json}")
            response = s.recv(1024)
            logger.info(f"Response from Blender: {response.decode('utf-8')}")
    except ConnectionRefusedError:
        logger.error("Connection refused. Make sure the server is running in Blender.")
    except Exception as e:
        logger.error(f"An error occurred: {e}")


def main():
    """
    Main loop to get user input and send it to Blender as a JSON object.
    """
    print("--- MCP Server for Blender (AI Edition) ---")
    print("Commands:")
    print("  'cube', 'sphere', 'snowman' - for procedural objects")
    print("  'ai <your prompt>'          - to generate a model with AI")
    print("  'exit'                      - to quit")

    while True:
        user_input = input("\nEnter command > ").lower()
        command_payload = None

        if user_input == 'exit':
            break

        if user_input.startswith("ai "):
            prompt = user_input[3:].strip()
            if not prompt:
                print("Error: AI prompt cannot be empty.")
                continue

            # 1. Call the (simulated) AI API
            model_filepath = call_ai_text_to_3d_api(prompt)

            # 2. If successful, create the command for Blender
            if model_filepath:
                command_payload = {
                    "command": "import_model",
                    "params": {
                        "filepath": model_filepath
                    }
                }
            else:
                print("Could not generate model. Aborting command.")

        elif user_input == 'cube':
            command_payload = {"command": "create_cube", "params": {"size": 2, "location": [0, 0, 1]}}
        elif user_input == 'sphere':
            command_payload = {"command": "create_sphere", "params": {"radius": 1, "location": [0, 0, 1]}}
        elif user_input == 'snowman':
            command_payload = {"command": "create_snowman"}
        else:
            print("Unknown command.")

        if command_payload:
            send_command_to_blender(command_payload)


if __name__ == '__main__':
    params = {
        "python_script": "bpy.ops.mesh.primitive_cube_add(size=2, enter_editmode=False, align='WORLD', location=[0, 0, 1])"
    }
    # send_command_to_blender({"command": "create_cube", "params": {"size": 2, "location": [0, 0, 1]}})
    script = params.get("python_script")
    script = script.strip()
    send_command_to_blender({"command": "run_physics_simulation", "params": {"script": script}})
